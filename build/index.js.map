{"version":3,"sources":["../src/index.ts"],"names":["Memory","constructor","config","appOptions","_config","_logger","logger","_app_config","debug","client","DynamoDBClient","region","credentials","accessKeyId","secretAccessKey","sessionToken","authenticate","user","password","done","command","GetItemCommand","TableName","LoginTableName","Key","username","S","send","then","results","Item","userCredentials","asciiPassword","key","split","expectedPassword","secret","err","API_ERROR","BAD_USERNAME_PASSWORD","token","authenticator","generate","console","log","adduser","PutItemCommand","allow_access","pkg","cb","allow_publish"],"mappings":"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","sourcesContent":["import {\n  PluginOptions,\n  Callback,\n  PackageAccess,\n  IPluginAuth,\n  RemoteUser,\n  Logger,\n  Config\n} from '@verdaccio/types';\nimport {\n  getConflict,\n  getForbidden,\n  getNotFound,\n  getUnauthorized,\n  API_ERROR,\n} from '@verdaccio/commons-api';\nimport { DynamoDBClient,  PutItemCommand, GetItemCommand } from \"@aws-sdk/client-dynamodb\"\n\nimport { authenticator } from 'otplib';\nimport { PluginConfig } from './types';\n\n\nexport default class Memory implements IPluginAuth<PluginConfig> {\n  public _logger: Logger;\n  public _config: {};\n  public _app_config: PluginConfig;\n  private client: DynamoDBClient;\n\n\n  public constructor(\n    config: PluginConfig,\n    appOptions: PluginOptions<PluginConfig>\n  ) {\n    this._config = config;\n    this._logger = appOptions.logger;\n    this._app_config = appOptions.config;\n    this._logger.debug(this._app_config)\n    this.client = new DynamoDBClient({ \n      region: this._app_config.region, \n      credentials:{\n        accessKeyId:this._app_config.accessKeyId,\n        secretAccessKey:this._app_config.secretAccessKey,\n        sessionToken:this._app_config.sessionToken\n      }\n    })\n  }\n\n  public authenticate(user: string, password: string, done: Callback): void {\n    const command = new GetItemCommand({\n      TableName: this._app_config.LoginTableName,\n      Key: {\n        username: {\n          S: user\n        }\n      }\n    })\n\n    this.client.send(command)\n      .then(results => {\n        if (!results.Item)\n          return done(null, false)\n        const userCredentials = results.Item.password.S as string;\n        const [asciiPassword, key] = password.split(' ');\n        const [expectedPassword, secret] = userCredentials.split(' ');\n\n        if (asciiPassword !== expectedPassword) {\n          const err = getUnauthorized(API_ERROR.BAD_USERNAME_PASSWORD);\n          return done(err);\n        }\n        const token = authenticator.generate(secret);\n        console.log('\\n\\n\\n', token, key, secret);\n\n        if (token !== key) {\n          const err = getUnauthorized(API_ERROR.BAD_USERNAME_PASSWORD);\n          return done(err);\n        }\n        return done(null, [user]);\n      })\n\n\n\n    // authentication succeeded!\n    // return all usergroups this user has access to;\n  }\n\n  public adduser(user: string, password: string, done: Callback): void {\n    const command = new PutItemCommand({\n      TableName: this._app_config.LoginTableName,\n      Item: {\n        username: {\n          S: user\n        },\n        password: {\n          S: password\n        }\n      }\n    })\n    this.client.send(command)\n      .then(() => done(null, user))\n  }\n\n  // public changePassword(\n  //   username: string,\n  //   password: string,\n  //   newPassword: string,\n  //   cb: Callback\n  // ): void {\n  //   const user: UserMemory = this._users[username];\n\n  //   if (user && user.password === password) {\n  //     user.password = newPassword;\n  //     this._users[username] = user;\n  //     cb(null, user);\n  //   } else {\n  //     const err = getNotFound('user not found');\n  //     this._logger.debug({ user: username }, 'change password user  @{user} not found');\n  //     return cb(err);\n  //   }\n  // }\n\n  public allow_access(user: RemoteUser, pkg: PackageAccess, cb: Callback): void {\n    // if (pkg?.access?.includes('$all') || pkg?.access?.includes('$anonymous')) {\n\n    //   return cb(null, true);\n    // }\n\n    // if (!user?.name) {\n    //   const err = getForbidden('not allowed to access package');\n    //   this._logger.debug({ user: user.name }, 'user: @{user} not allowed to access package');\n    //   return cb(err);\n    // }\n\n    // if (pkg?.access?.includes(user?.name) || pkg?.access?.includes('$authenticated')) {\n    //   return cb(null, true);\n    // }\n\n    // const err = getForbidden('not allowed to access package');\n    // return cb(err);\n    return cb(null, true);\n  }\n\n  public allow_publish(user: RemoteUser, pkg: PackageAccess, cb: Callback): void {\n    // if (pkg?.publish?.includes('$all') || pkg?.publish?.includes('$anonymous')) {\n    //   return cb(null, true);\n    // }\n\n    // if (!user?.name) {\n    //   const err = getForbidden('not allowed to publish package');\n    //   return cb(err);\n    // }\n\n    // if (pkg?.publish?.includes(user.name) || pkg?.publish?.includes('$authenticated')) {\n    //   return cb(null, true);\n    // }\n\n    // const err = getForbidden('not allowed to publish package');\n\n    // return cb(err);\n    return cb(null, true);\n  }\n}\n"],"file":"index.js"}