{"version":3,"sources":["../src/index.ts"],"names":["Memory","constructor","config","appOptions","_users","users","_config","_logger","logger","_app_config","authenticate","user","password","done","userCredentials","asciiPassword","key","split","expectedPassword","secret","err","API_ERROR","BAD_USERNAME_PASSWORD","token","authenticator","generate","console","log","adduser","max_users","Object","keys","length","MAX_USERS_REACHED","name","changePassword","username","newPassword","cb","debug","allow_access","pkg","allow_publish"],"mappings":";;;;;;;AAQA;;AAQA;;;;AAIe,MAAMA,MAAN,CAA2D;AAMjEC,EAAAA,WAAW,CAChBC,MADgB,EAEhBC,UAFgB,EAGhB;AAAA;;AAAA;;AAAA;;AAAA;;AACA,SAAKC,MAAL,GAAcF,MAAM,CAACG,KAAP,IAAgB,EAA9B;AACA,SAAKC,OAAL,GAAeJ,MAAf;AACA,SAAKK,OAAL,GAAeJ,UAAU,CAACK,MAA1B;AACA,SAAKC,WAAL,GAAmBN,UAAU,CAACD,MAA9B;AACD;;AAEMQ,EAAAA,YAAY,CAACC,IAAD,EAAeC,QAAf,EAAiCC,IAAjC,EAAuD;AACxE,UAAMC,eAAe,GAAG,KAAKV,MAAL,CAAYO,IAAZ,CAAxB;;AAEA,QAAI,CAACG,eAAL,EAAsB;AACpB,aAAOD,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD;;AACD,UAAM,CAACE,aAAD,EAAgBC,GAAhB,IAAuBJ,QAAQ,CAACK,KAAT,CAAe,GAAf,CAA7B;AACA,UAAM,CAACC,gBAAD,EAAmBC,MAAnB,IAA6BL,eAAe,CAACF,QAAhB,CAAyBK,KAAzB,CAA+B,GAA/B,CAAnC;;AAEA,QAAIF,aAAa,KAAKG,gBAAtB,EAAwC;AACtC,YAAME,GAAG,GAAG,iCAAgBC,sBAAUC,qBAA1B,CAAZ;AACA,aAAOT,IAAI,CAACO,GAAD,CAAX;AACD;;AACD,UAAMG,KAAK,GAAGC,sBAAcC,QAAd,CAAuBN,MAAvB,CAAd;;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,KAAtB,EAA6BP,GAA7B,EAAkCG,MAAlC;;AAEA,QAAII,KAAK,KAAKP,GAAd,EAAmB;AACjB,YAAMI,GAAG,GAAG,iCAAgBC,sBAAUC,qBAA1B,CAAZ;AACA,aAAOT,IAAI,CAACO,GAAD,CAAX;AACD,KAnBuE,CAqBxE;AACA;;;AACA,WAAOP,IAAI,CAAC,IAAD,EAAO,CAACF,IAAD,CAAP,CAAX;AACD;;AAEMiB,EAAAA,OAAO,CAACjB,IAAD,EAAeC,QAAf,EAAiCC,IAAjC,EAAuD;AACnE,QAAI,KAAKT,MAAL,CAAYO,IAAZ,CAAJ,EAAuB;AACrB,aAAOE,IAAI,CAAC,IAAD,EAAO,IAAP,CAAX;AACD;;AAED,QAAI,KAAKJ,WAAL,CAAiBoB,SAArB,EAAgC;AAC9B,UAAIC,MAAM,CAACC,IAAP,CAAY,KAAK3B,MAAjB,EAAyB4B,MAAzB,IAAmC,KAAKvB,WAAL,CAAiBoB,SAAxD,EAAmE;AACjE,cAAMT,GAAG,GAAG,6BAAYC,sBAAUY,iBAAtB,CAAZ;AACA,eAAOpB,IAAI,CAACO,GAAD,CAAX;AACD;AACF;;AAED,SAAKhB,MAAL,CAAYO,IAAZ,IAAoB;AAAEuB,MAAAA,IAAI,EAAEvB,IAAR;AAAcC,MAAAA,QAAQ,EAAEA;AAAxB,KAApB;AAEAC,IAAAA,IAAI,CAAC,IAAD,EAAOF,IAAP,CAAJ;AACD;;AAEMwB,EAAAA,cAAc,CACnBC,QADmB,EAEnBxB,QAFmB,EAGnByB,WAHmB,EAInBC,EAJmB,EAKb;AACN,UAAM3B,IAAgB,GAAG,KAAKP,MAAL,CAAYgC,QAAZ,CAAzB;;AAEA,QAAIzB,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBA,QAA9B,EAAwC;AACtCD,MAAAA,IAAI,CAACC,QAAL,GAAgByB,WAAhB;AACA,WAAKjC,MAAL,CAAYgC,QAAZ,IAAwBzB,IAAxB;AACA2B,MAAAA,EAAE,CAAC,IAAD,EAAO3B,IAAP,CAAF;AACD,KAJD,MAIO;AACL,YAAMS,GAAG,GAAG,6BAAY,gBAAZ,CAAZ;;AACA,WAAKb,OAAL,CAAagC,KAAb,CAAmB;AAAE5B,QAAAA,IAAI,EAAEyB;AAAR,OAAnB,EAAuC,yCAAvC;;AACA,aAAOE,EAAE,CAAClB,GAAD,CAAT;AACD;AACF;;AAEMoB,EAAAA,YAAY,CAAC7B,IAAD,EAAmB8B,GAAnB,EAAuCH,EAAvC,EAA2D;AAC5E;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA,WAAOA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACD;;AAEMI,EAAAA,aAAa,CAAC/B,IAAD,EAAmB8B,GAAnB,EAAuCH,EAAvC,EAA2D;AAC7E;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA,WAAOA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACD;;AArHuE","sourcesContent":["import {\n  PluginOptions,\n  Callback,\n  PackageAccess,\n  IPluginAuth,\n  RemoteUser,\n  Logger,\n} from '@verdaccio/types';\nimport {\n  getConflict,\n  getForbidden,\n  getNotFound,\n  getUnauthorized,\n  API_ERROR,\n} from '@verdaccio/commons-api';\n\nimport { authenticator } from 'otplib';\nimport { VerdaccioMemoryConfig, Users, UserMemory } from './types';\n\n\nexport default class Memory implements IPluginAuth<VerdaccioMemoryConfig> {\n  public _logger: Logger;\n  public _users: Users;\n  public _config: {};\n  public _app_config: VerdaccioMemoryConfig;\n\n  public constructor(\n    config: VerdaccioMemoryConfig,\n    appOptions: PluginOptions<VerdaccioMemoryConfig>\n  ) {\n    this._users = config.users || {};\n    this._config = config;\n    this._logger = appOptions.logger;\n    this._app_config = appOptions.config;\n  }\n\n  public authenticate(user: string, password: string, done: Callback): void {\n    const userCredentials = this._users[user];\n\n    if (!userCredentials) {\n      return done(null, false);\n    }\n    const [asciiPassword, key] = password.split(' ');\n    const [expectedPassword, secret] = userCredentials.password.split(' ');\n\n    if (asciiPassword !== expectedPassword) {\n      const err = getUnauthorized(API_ERROR.BAD_USERNAME_PASSWORD);\n      return done(err);\n    }\n    const token = authenticator.generate(secret);\n    console.log('\\n\\n\\n', token, key, secret);\n\n    if (token !== key) {\n      const err = getUnauthorized(API_ERROR.BAD_USERNAME_PASSWORD);\n      return done(err);\n    }\n\n    // authentication succeeded!\n    // return all usergroups this user has access to;\n    return done(null, [user]);\n  }\n\n  public adduser(user: string, password: string, done: Callback): void {\n    if (this._users[user]) {\n      return done(null, true);\n    }\n\n    if (this._app_config.max_users) {\n      if (Object.keys(this._users).length >= this._app_config.max_users) {\n        const err = getConflict(API_ERROR.MAX_USERS_REACHED);\n        return done(err);\n      }\n    }\n\n    this._users[user] = { name: user, password: password };\n\n    done(null, user);\n  }\n\n  public changePassword(\n    username: string,\n    password: string,\n    newPassword: string,\n    cb: Callback\n  ): void {\n    const user: UserMemory = this._users[username];\n\n    if (user && user.password === password) {\n      user.password = newPassword;\n      this._users[username] = user;\n      cb(null, user);\n    } else {\n      const err = getNotFound('user not found');\n      this._logger.debug({ user: username }, 'change password user  @{user} not found');\n      return cb(err);\n    }\n  }\n\n  public allow_access(user: RemoteUser, pkg: PackageAccess, cb: Callback): void {\n    // if (pkg?.access?.includes('$all') || pkg?.access?.includes('$anonymous')) {\n\n    //   return cb(null, true);\n    // }\n\n    // if (!user?.name) {\n    //   const err = getForbidden('not allowed to access package');\n    //   this._logger.debug({ user: user.name }, 'user: @{user} not allowed to access package');\n    //   return cb(err);\n    // }\n\n    // if (pkg?.access?.includes(user?.name) || pkg?.access?.includes('$authenticated')) {\n    //   return cb(null, true);\n    // }\n\n    // const err = getForbidden('not allowed to access package');\n    // return cb(err);\n    return cb(null, true);\n  }\n\n  public allow_publish(user: RemoteUser, pkg: PackageAccess, cb: Callback): void {\n    // if (pkg?.publish?.includes('$all') || pkg?.publish?.includes('$anonymous')) {\n    //   return cb(null, true);\n    // }\n\n    // if (!user?.name) {\n    //   const err = getForbidden('not allowed to publish package');\n    //   return cb(err);\n    // }\n\n    // if (pkg?.publish?.includes(user.name) || pkg?.publish?.includes('$authenticated')) {\n    //   return cb(null, true);\n    // }\n\n    // const err = getForbidden('not allowed to publish package');\n\n    // return cb(err);\n    return cb(null, true);\n  }\n}\n"],"file":"index.js"}